import React, {useState} from 'react';
import './SignUp.css';
import Button from '../../components/button/Button';
import axios from 'axios';
// import {useForm} from 'react-hook-form';


    const headers = {
        "Content-Type": "application/json",
        Authorization: `Bearer ${jwt}`
    }
                const response = await axios.get(`https://frontend-educational-backend.herokuapp.com/api/user/${headers}`)
// import React, {useContext} from 'react';
// import {AuthContext} from '../../context/AuthContext';
 // const {auth, setAuth} = useContext(AuthContext);


  style={navLinkStyles}




const Register = () => {
    const [error, setError] = useState(false);
    const [username, setUsername] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [repeatPassword, setRepeatPassword] = useState('');
    // const { register, errors} = useForm();



    // mount dependencies leeg
    // useEffect(() =>{
    //     console.log("mount");
    // },[])
    //
    //
    // // updatefase
    // useEffect(() =>{
    //     console.log("update");
    // },[])
    //
    // // unmount
    // useEffect(() =>{
    //     console.log("unmount");
    // },[])

    async function handleSubmit(e) {
        e.preventDefault();

        try {
            const result = await axios.post('https://frontend-educational-backend.herokuapp.com/api/auth/signup',
                {
                    username: username,
                    email: email,
                    password: password,
                    role: ['user']
                });
            console.log(result.data);
        } catch (e) {
            console.error(e);
            setError(true);
        }
    }


    // hookform

    // // updatefase
    // useEffect(() =>{
    //    const controller = new AbortController();
    //     function handleSubmit(e) {
    //         e.preventDefault();
    //
    //         if (!email || !username || !password || !repeatPassword) {
    //             console.error('Vul alle velden in alstublieft.');
    //             return;
    //         }
    //
    //         if (!email.includes('@')) {
    //             console.error('Vul een geldig email adres in alstublieft.');
    //             return;
    //         }
    //
    //         if (username.length < 6) {
    //             console.error('Gebruikersnaam moet minimaal 6 letters zijn.');
    //             return;
    //         }
    //
    //         if (password.length < 6) {
    //             console.error('Wachtwoord moet minimaal 6 letters zijn.');
    //             return;
    //         }
    //
    //         if (password !== repeatPassword) {
    //             console.error('Wachtwoorden komen niet overeen.');
    //             return;
    //         }
    //
    //         const data = {
    //             username: username,
    //             email: email,
    //             password: password,
    //             role: ['user']
    //         };
    //         const {headers} = {
    //             "Content-Type": 'application/json',
    //             Authorization: 'Bearer xxx.xxx.xxx',
    //         };
    //
    //         async function handleRegister(e) {
    //             e.preventDefault();
    //             setLoading(true)
    //             try {
    //                 setError(false)
    //                 const response = await axios.post((process.env.REACT_APP_NOVI_URI + process.env.REACT_APP_NOVI_ENDPOINT_POST_REGISTER),{headers,data, signal : controller.signal});
    //                 setData(response.data)
    //                 console.log(response);
    //                 // SignIn(response.data)
    //                 // SignIn(response.data.accesToken)
    //                 // console.log(accesToken);
    //
    //             } catch (e) {
    //                 setError(true)
    //                 console.error();
    //                 if(axios.isCancel(e))
    //                     console.log("the axios request was cancelled");
    //                 if(error && 404){
    //                     return <NotFound/>
    //                 }
    //                 if(error && 400){
    //
    //                 }
    //                 else{
    //                     console.error(e);
    //                 }
    //             }
    //
    //
    //             setLoading(false)
    //         }
    //          handleRegister();
    //
    //
    //     }
    // },[])


    return (
        <>
            <form onSubmit={handleSubmit}>
                <div className="register-outer-container-background">
                    <div className="register-inner-container">
                        <div className="register-container-title">
                            <h2 className="register-title">REGISTREREN</h2>
                            <p className="register-text-p-title">Vul alstublieft in om een account te maken.</p>
                        </div>
                        <div className="register-container-text">

                            <label htmlFor="username">
                                <p className="register-text-p">Gebruikersnaam</p></label>
                            <input
                                id="username"
                                type="text"
                                name="username"
                                value={username}
                                onChange={(e) => setUsername(e.target.value)}
                                placeholder="Vul gebruikersnaam in..."
                                ref={register({required: true, minLength: 6})}
                            />
                            {errors.username && errors.username.type === 'required' && (
                                <p>Gebruikersnaam is verplicht.</p>
                            )}
                            {errors.username && errors.username.type === 'minLength' && (
                                <p>Gebruikersnaam moet minimaal 6 karakters lang zijn.</p>
                            )}

                            <label htmlFor="email">
                                <p className="register-text-p">Email</p></label>
                            <input
                                id="email"
                                type="text"
                                name="email"
                                value={email}
                                onChange={(e) => setEmail(e.target.value)}
                                placeholder="Vul email in..."
                                ref={register({required: true, pattern: /\S+@\S+\.\S+/})}
                            />
                            {errors.email && errors.email.type === 'required' && (
                                <p>Email is verplicht.</p>
                            )}
                            {errors.email && errors.email.type === 'pattern' && (
                                <p>Ongeldig email adres.</p>
                            )}

                            <label htmlFor="password"
                            ><p className="register-text-p">Wachtwoord</p></label>
                            <input
                                id="password"
                                type="password"
                                autoComplete="password"
                                name="password"
                                value={password}
                                onChange={(e) => setPassword(e.target.value)}
                                placeholder="Vul wachtwoord in..."
                                ref={register({required: true, minLength: 6})}
                            />
                            {errors.password && errors.password.type === 'required' && (
                                <p>Wachtwoord is verplicht.</p>
                            )}
                            {errors.password && errors.password.type === 'minLength' && (
                                <p>Wachtwoord moet minimaal 6 karakters lang zijn.  </p>
                            )}

                            <label htmlFor="repeatPassword"
                            ><p className="register-text-p">Herhaal-Wachtwoord</p></label>
                            <input
                                id="repeatPassword"
                                type="password"
                                autoComplete="repeatPassword"
                                name="password"
                                onChange={(e) => setRepeatPassword(e.target.value)}
                                placeholder="Vul wachtwoord in..."
                                ref={register({required: true})}
                            />
                            {errors.repeatPassword && errors.repeatPassword.type === 'required' && (
                                <p>Herhaal wachtwoord is verplicht.</p>
                            )}
                            {error && <p>Wachtwoorden komen niet overeen.</p>}
                            {error && <p>Gebruikersnaam bestaat al, vul een andere in. </p>}

                            <div className="register-button-div">
                                <Button
                                    type="submit"
                                />
                            </div>
                            <div className="container-sign-in">
                                <p className="register-agreement-text">Bij het maken van een account gaat u akkoord
                                    met onze <a href="/privacy verklaring">Privacyverklaring</a>.</p>
                                <p>Heeft u al een account? <a href="/login">log in</a>.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </>);
};

export default Register;

